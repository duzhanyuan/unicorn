
# Common Makefile for entire testSuite for pmlib library
# This makefile is included from makefiles in various testSuite's

COMPILER=g++

ifndef NVCC_PATH
NVCC_PATH=nvcc
endif

NVCC_COMPILER=$(NVCC_PATH)

FLAGS += -Wall -DUNIX -DLINUX -DSAMPLE_NAME=$(SAMPLE_NAME) -std=c++11 -MMD
CUDAFLAGS += -DUNIX -DSAMPLE_NAME=$(SAMPLE_NAME) --machine 64
CUDAFLAGS += --compiler-options

ifeq ($(PLATFORM), MACOS)
	FLAGS += -fno-inline
	CUDAFLAGS += -fno-inline
endif

ifeq ($(DEBUG), 1)
	FLAGS += -DDEBUG -D_DEBUG -g
	CUDAFLAGS += -DDEBUG -D_DEBUG -g -G
	BUILD=debug
	LIBRARIES +=-L$(PMLIB_DEBUG_LIB_PATH) -lpmlib_g
else
	FLAGS += -O3 -DNDEBUG
	BUILD=release
	LIBRARIES +=-L$(PMLIB_RELEASE_LIB_PATH) -lpmlib
endif

OUTDIR= $(BUILD)

ifeq ($(DEBUG), 1)
	PROGRAM=$(OUTDIR)/$(SAMPLE_NAME)$(NAME_SUFFIX)_g.exe
else
	PROGRAM=$(OUTDIR)/$(SAMPLE_NAME)$(NAME_SUFFIX).exe
endif

ifeq ($(BUILD_COMMON), 1)
OBJECTS += commonAPI.o
endif

ifeq ($(BUILD_CUDA), 1)
ifeq ($(ENABLE_BLAS), 1)
CUDA_OBJECTS += commonAPICUDA.o
LIBRARIES += -lcublas
CUDAFLAGS += -DENABLE_BLAS
endif
FLAGS += -DBUILD_CUDA -DSUPPORT_CUDA
CUDAFLAGS += -DBUILD_CUDA -DSUPPORT_CUDA
INCLUDES += -I$(CUDA_INCLUDE_PATH)
OBJECTS += $(CUDA_OBJECTS)
LIBRARIES += -L$(CUDA_LIB_PATH) -lcudart
endif

INCLUDES += -I$(PMLIB_INCLUDE_PATH) -I../../source/code/inc -I$(PATH_PREFIX)../../../common/source/code/inc

ifeq ($(ENABLE_BLAS), 1)
FLAGS += -DENABLE_BLAS

ifndef CBLAS_LIB_PATH
ifeq ($(PLATFORM), MACOS)
LIBRARIES += -L/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A
else
LIBRARIES += -L/usr/lib64/atlas
endif
else
LIBRARIES += -L$(CBLAS_LIB_PATH)
endif

ifndef CBLAS_INCLUDE_PATH
ifeq ($(PLATFORM), MACOS)
INCLUDES += -I/System/Library/Frameworks/Accelerate.framework/Versions/A/Frameworks/vecLib.framework/Versions/A/Headers
endif
else
INCLUDES += -I$(CBLAS_INCLUDE_PATH)
endif

LIBRARIES += -lcblas
endif

INCLUDES += -I$(PMLIB_INCLUDE_PATH) -I../../source/code/inc -I$(PATH_PREFIX)../../../common/source/code/inc

ifeq ($(AUTOCONF), 1)
LIBRARIES += -Wl,-rpath,$(prefix)/lib,-rpath,$(CUDA_LIB_PATH)
endif

ifeq ($(PLATFORM), LINUX)
	STRIP=strip -s
else
	STRIP=strip -u -r
endif

OBJS= $(OBJECTS:%.o=$(OUTDIR)/%.o)

all: precompile compile prelink link final

precompile:
	@echo "*** Compiling ***"

compile: $(OBJS)

prelink:
	@echo "\n*** Linking ***"

link: $(PROGRAM)

ifeq ($(DEBUG), 1)
$(PROGRAM): $(OBJS)
	$(COMPILER) -o $(PROGRAM) $(OBJS) $(LIBRARIES) -lstdc++
else
$(PROGRAM): $(OBJS)
	$(COMPILER) -o $(PROGRAM) $(OBJS) $(LIBRARIES) -lstdc++
	@echo "\n*** Stripping ***"
	$(STRIP) $(PROGRAM)
endif

final:
	@echo "\n*** Done ***"

# Generic rule for compiling any cpp file. Any specific rules must
# be added after this rule as the later one overrides
$(OUTDIR)/%$(NAME_SUFFIX).o: ../../source/code/src/%.cpp
	$(COMPILER) $(FLAGS) $(INCLUDES) -c $< -o $@

$(OUTDIR)/%.o: $(PATH_PREFIX)../../../common/source/code/src/%.cpp
	$(COMPILER) $(FLAGS) $(INCLUDES) -c $< -o $@

$(OUTDIR)/%$(NAME_SUFFIX).o: ../../source/code/src/%.cu
	$(NVCC_COMPILER) $(CUDAFLAGS) $(INCLUDES) -c $< -o $@

$(OUTDIR)/%.o: $(PATH_PREFIX)../../../common/source/code/src/%.cu
	$(NVCC_COMPILER) $(CUDAFLAGS) $(INCLUDES) -c $< -o $@

clean: 
	rm -f $(OUTDIR)/*.o $(OUTDIR)/*.d core.* $(PROGRAM)

install:
	$(INSTALL) -d $(prefix)
	$(INSTALL) -d $(prefix)/testsuite
	$(INSTALL) -d $(prefix)/testsuite/$(SAMPLE_NAME)
	$(INSTALL) $(PROGRAM) $(prefix)/testsuite/$(SAMPLE_NAME)

-include $(OUTDIR)/*.d
